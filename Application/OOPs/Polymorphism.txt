The word polymorphism means having many forms. 
In object-oriented programming paradigm, polymorphism is often expressed as 'one interface, multiple functions'.

Polymorphism can be static or dynamic. 

In static polymorphism, the response to a function is determined at the compile time. 
In dynamic polymorphism, it is decided at run-time.

Static Polymorphism
The mechanism of linking a function with an object during compile time is called early binding. 
It is also called static binding. 
C# provides two techniques to implement static polymorphism. 

They are −
Function overloading
Operator overloading


Dynamic Polymorphism
C# allows you to create abstract classes that are used to provide partial class implementation of an interface. 
Implementation is completed when a derived class inherits from it. 
Abstract classes contain abstract methods, which are implemented by the derived class. 
The derived classes have more specialized functionality.
Dynamic polymorphism is implemented by abstract classes and virtual functions.

Here are the rules about abstract classes −
You cannot create an instance of an abstract class
You cannot declare an abstract method outside an abstract class
When a class is declared sealed, it cannot be inherited, abstract classes cannot be declared sealed.